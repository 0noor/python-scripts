--nora's mouse chase!
--by jte   p8jam2 2016-05

north=0
south=1
west=2
east=3

--pico-8's wacky nonstandard
--table manipulation chip
--leaves much to be desired.
function ins(t, v, i)
 for n = #t,i,-1 do
  t[n+1] = t[n]
 end
 t[i] = v
 return t
end

function isin(t, v)
 for x in all(t) do
  if x == v then
   return true
  end
 end
 return false
end

function ceil(x)
 return -flr(-x)
end

--begin my actual game stuff?



world_obj=entity:new({dir=south,anim=0,ticks=0,radius=5,height=6})
function world_obj:spawn(o)
 o = self:new(o)
 add(world.objects, o)
 return o
end

function world_obj:trytiles(x,y)
 for y=flr((y+2)/16),flr((y+7)/16) do
  for x=flr((x+4)/16),flr((x+3+8)/16) do
   local t = mget(x+world.room*9,y+9)
   local f = fget(t,0)
   if f then
    return false
   end
  end
 end
 return true
end

function world_obj:trymove(x,y)
 --test new position
 --for tile collisions
 if not self:trytiles(x,y) then
  if self:trytiles(self.x,y) then
   x = self.x
  elseif self:trytiles(x,self.y) then
   y = self.y
  else
   return false
  end
 end

 -- test new position for object collisions
 for o in all(world.objects) do
  if o ~= self and o.solid ~= false then
   if abs(o.x - x) < o.radius+self.radius and
      (o.y > y-self.height and y > o.y-o.height) then
    if x ~= self.x and abs(o.x - self.x) >= o.radius+self.radius then
     x = self.x
    elseif y ~= self.y then
     y = self.y
    else
     return false
    end
   end
  end
 end

 --prevent character from
 --leaving the screen
 x,y =
     x<4 and 4
  or x>124 and 124
  or x,
     y<8 and 8
  or y>128 and 128
  or y

 local r = self.x~=x or self.y~=y
 self.x,self.y=x,y
 if r then
  if world.room == 0 and self.y >= 104 then
   r,player.x,player.y,player.dir=false,96,120,west
   world:moveroom(1)
   crossin()
  elseif world.room == 1 and self.x >= 108 then
   r,player.x,player.y,player.dir=false,64,96,north
   world:moveroom(0)
   crossin()
  elseif world.room == 1 and self.y < 80 and self.x > 64 then
   r,player.x,player.y,player.dir=false,64,96,north
   world:moveroom(2)
   crossin()
  elseif world.room == 1 and self.y < 80 and self.x < 64 then
   r,player.x,player.y,player.dir=false,64,96,north
   world:moveroom(3)
   crossin()
  elseif world.room == 2 and self.y > 104 then
   r,player.x,player.y,player.dir=false,80,104,south
   world:moveroom(1)
   crossin()
  elseif world.room == 3 and self.y > 104 then
   r,player.x,player.y,player.dir=false,32,104,south
   world:moveroom(1)
   crossin()
  end
 end
 return r
end

--player control
function world_obj:control()
 local x,y = self.x,self.y
 if btn(0) then x -= 1 end
 if btn(1) then x += 1 end
 if btn(2) then y -= 1 end
 if btn(3) then y += 1 end

 --for the count of tokens...
 --devil's pact here:
 self.dir
  = y > self.y and south
 or y < self.y and north
 or x < self.x and west
 or x > self.x and east
 or self.dir
 --do trymove on a separate
 --line because it does warps
 self.anim=self:trymove(x,y) and 1 or 0

 if self.anim==1 and self.ticks%12 == 0 then
  sfx(21+(self.ticks/12)%2)
  if player.encounter_steps > 0 then
   player.encounter_steps -= 1
  end
 end

 --search for nearby
 --objects to activate
 if btnp(5) then
  for o in all(world.objects) do
   if o ~= self and o.activate and abs(o.x-self.x)+abs(o.y-self.y) < 16 then
    o:activate(self)
    break
   end
  end
 end
end

function world_obj:think() end
function world_obj:draw() end

cat=world_obj:new({name="nora",hp=100,max_hp=100,mp=40,max_mp=40,weakness={0.5,1,1.5,1}})
function cat:think()
 if self.anim ~= 0 then
  self.ticks += 1
 else
  self.ticks = 0
 end
end

function cat:draw()
 local f=self.anim==1 and (flr(self.ticks/6)+1)%4 or self.anim==2 and (flr(self.ticks/20)+1)%4 or 0
 if self.dir == south then
  pal(1,15)
  spr(2*(f%2),f>1 and -9 or -8,-16,2,2,f>1)
 elseif self.dir == north then
  pal(1,8)
  spr(2*(f%2),f<2 and -9 or -8,-16,2,2,f<2)
 else
  local d=self.dir == west
  spr(4+2*(f%2)+2*flr(f/3),d and -9 or -8,-16,2,2,d)
 end
end

dog=world_obj:new({name="numo",weakness={1,2,0,1}})
dog.think = cat.think

function dog:draw()
 local f=self.anim==1 and (flr(self.ticks/6)+1)%4 or self.anim==2 and (flr(self.ticks/20)+1)%4 or 0
 if self.dir == south then
  pal(1,13)
  spr(38+2*(f%2),-8,-16,2,2,f>1)
 elseif self.dir == north then
  pal(1,5)
  spr(38+2*(f%2),-8,-16,2,2,f<2)
 else
  local d=self.dir == west
  spr(42+2*(f%2)+2*flr(f/3),d and -9 or -8,-16,2,2,d)
 end
end

mouse=world_obj:new({name="nina"})
mouse.think = cat.think

function mouse:draw()
 local f=self.anim==1 and (flr(self.ticks/6)+1)%4 or self.anim==2 and (flr(self.ticks/20)+1)%4 or 0
 if self.dir == south then
  pal(1,7)
  spr(10+2*(f%2),-8,-16,2,2,f>1)
 elseif self.dir == north then
  pal(1,6)
  spr(10+2*(f%2),-8,-16,2,2,f<2)
 else
  local d=self.dir == west
  spr(32+2*(f%2)+2*flr(f/3),d and -9 or -8,-16,2,2,d)
 end
end

cheese=world_obj:new()
function cheese:draw()
 spr(14,-8,-16,2,2)
end

table=world_obj:new({item=nil})
function table:draw()
 --pal(1,0)
 palt(1,true)
 spr(68,-8,-8)
 spr(68,0,-8,1,1,true)

 if self.item then
  palt()
  camera(-self.x,-(self.y-8))
  self.item:draw()
 end
end

function table:activate(plr)
 if self.item then
  self.item.activate(self.item, plr)
 end
end

foodbowl=world_obj:new({radius=1,height=4})
function foodbowl:draw()
 pal(5,2)
 pal(3,8)
 palt(10,true)
 spr(115,-4,-8)
end

waterbowl=foodbowl:new()
function waterbowl:draw()
 pal(8,6)
 pal(2,5)
 pal(4,5)
 pal(3,6)
 palt(10,true)
 spr(115,-4,-8)
end

grapebowl=foodbowl:new()
function grapebowl:draw()
 pal(8,7)
 pal(4,7)
 pal(5,7)
 pal(3,4)
 pal(10,4)
 spr(115,-1,-12)
end

fridge=world_obj:new({radius=11,height=16})
function fridge:draw()
 sspr(32,48,8,8,-16,-32,32,32)
end

sleepingdog=world_obj:new()
function sleepingdog:draw()
 spr(78,-8,-16,2,2)
end

spinstars=world_obj:new({solid=false})
function spinstars:think()
 self.t+=1
end

function spinstars:draw()
 local f=flr(self.t/4)%4
 if f==3 then
  spr(76,-5,-18,1,1,true)
 else
  spr(75+f,-4,-18)
 end
end

bed=world_obj:new({radius=22,height=20,defeated=false})
function bed:think()
 if player.busy or player.encounter_steps > 0 then return end
 if abs(player.x-self.x) < 32 and abs(player.y-(self.y-(self.height/2-player.height/2))) < 16 then
  player.encounter_steps=30
  sfx(15)
  dialog:spawn({script="<spdfuzzy slippers appeared!<wai0060<btl0003<end"})
 end
end
function bed:draw()
 pal(1,0)
 sspr(0,48,24,16,-24,-32,48,32)
 rect(-22,0,24,1,0)
end

slippers=entity:new({name="slippers",hp=80,max_hp=80,weakness={2,0,1,1}})
function slippers:think()
 --slippers don't think,
 -- you silly cat.
 if self.anim==1 then
  self.t+=1
 else
  self.t=0
 end
end

function slippers:draw()
 local f=flr(self.t/6)%4
 if self.anim==1 and f==0 then
  spr(111,-7,-10)
  spr(111,-1,-8)
 elseif self.anim==1 and f==2 then
  spr(111,-7,-8)
  spr(111,-1,-10)
 else
  spr(111,-7,-8)
  spr(111,-1,-8)
 end
end

noise=world_obj:new({solid=false})
function noise:think()
 self.t += 1
end

function noise:draw()
 if flr(self.t/4)%2 == 0 or flr(self.t/30)%2 == 0 then
  return
 end
 color(7)
 line(1,-8,8,-8)
 line(3,-14,8,-12)
 line(3,-2,8,-4)
end

key=world_obj:new({solid=false})
function key:draw()
 if self.color then
  pal(5,self.color)
 end
 spr(82,-4,-8)
end

dialog=entity:new({text="",time=0,script=""})
function dialog:spawn(o)
 o = self:new(o)
 o:show()
 return o
end

function dialog:show()
 player.busy=true
 player.anim=0
 add(hud_objects, self)
end

function dialog:get_param()
 local n=sub(self.script,1,4)*1
 self.script=sub(self.script,5)
 return n
end

function dialog:update()
 if self.nod then
  self.time += 1
  if btnp(5) then
   self.nod = false
   self.time = 0
  end
  return
 end

 if self.tutorial then
  if self.time > 0 then
   self.time -= 1
   return
  end
  if btnp(2) then
   sfx(19)
   self.tutorial=0
  elseif btnp(3) or btnp(4) then
   sfx(19)
   self.tutorial=1
  elseif btnp(5) then
   sfx(23)
   self.time=20
   if self.tutorial == 1 then
    self.tutorial=nil
   else
    self.tutorial=nil
    self.time=0
    self.text=""
    del(hud_objects,self)
    player.busy=false

    runtutorial()
   end
  end
  return
 end

 if self.wbe then
  if inbattle then
   return
  end
  self.wbe=false
  player.busy=true
  self.hidden=false
 end

 if btnp(4) then
  self.skip_ahead=true
  self.time=0
 end

 if self.time > 0 then
  self.time -= 1
  return
 end

 while self.script ~= "" and self.time == 0 do
  local c = sub(self.script,1,1)
  if c == "<" then
   c = sub(self.script,2,4)
   self.script=sub(self.script,5)
   if c=="nod" then
    self.nod=true
    self.skip_ahead=false
    break
   elseif c=="clr" then
    self.text=""
   elseif c=="end" then
    self.text=""
    del(hud_objects,self)
    player.busy=false
    break
   elseif c=="btl" then
    inbattle=battle:new({id=self:get_param()})
    --del(hud_objects,self)
    --player.busy=false
   elseif c=="wbe" then
    player.busy=false
    self.hidden=true
    self.wbe=true
   elseif c=="hid" then
    self.hidden=true
   elseif c=="sho" then
    self.hidden=false
    del(hud_objects,self)
    add(hud_objects,self)
   elseif c=="wai" then
    self.time=self:get_param()
   elseif c=="fai" then
    crossin(false)
   elseif c=="fao" then
    circout()
   elseif c=="tut" then
    sfx(16)
    self.time=10
    self.skip_ahead=false
    self.tutorial=0
   elseif c=="cin" then
    tutorial.cutin=self:get_param()
   elseif c=="spd" then
    self.skip_ahead=true
    self.time=0
   elseif c=="sfx" then
    sfx(self:get_param())
   elseif c=="see" then
    world:moveroom(self:get_param())
    del(world.objects,player)
    crossin()
   elseif c=="the" then
    music(0)
    the_end=true
   end
  else
   self.text = self.text..c
   self.script = sub(self.script,2)
   self.time = (self.skip_ahead or tutorial) and 0 or (c=="." or c=="!" or c=="?") and 10 or c=="," and 5 or (c==" " or c=="\n" or c=="'") and 1 or 3
   if self.time==3 then
    sfx(8,3)
   end
   if sub(self.script,1,4) == "<nod" then
    self.time = 0
   end
  end
 end
 if self.time > 0 then self.time -= 1 end
end

function dialog:draw()
 if self.hidden then
  return
 end
 --render the dialog box
 --base
 rectfill(5,102,122,122,7)
 --pal(1,0)
 --corners
 spr(127,0,97,1,1,true,true)
 spr(127,120,97,1,1,false,true)
 spr(127,0,120,1,1,true,false)
 spr(127,120,120,1,1,false,false)
 --top
 line(8,97,119,97,2)
 rectfill(8,98,119,99,8)
 rectfill(8,100,119,101,15)
 --left
 line(0,105,0,119,2)
 rectfill(1,105,2,119,8)
 rectfill(3,105,4,119,15)
 --right
 line(127,105,127,119,2)
 rectfill(125,105,126,119,8)
 rectfill(123,105,124,119,15)
 --bottom
 line(8,127,119,127,2)
 rectfill(8,125,119,126,8)
 rectfill(8,123,119,124,15)
 --text
 print(self.text,7,104,0)
 --nod
 if self.nod then
  spr(126,116,117-sin(self.time/10)*2)
 end
 --tut
 if self.tutorial then
  rectfill(32,76,96,96,2)
  rect(32,76,96,96,0)
  color(7)
  print("tutorial?",34,78)
  print("yes",80,84)
  print("no",80,90)
  arrow(76,84+self.tutorial*6)
 end
end

status=entity:new()
function status:new(o)
 local o=self._super.new(self,o)
 o.x = o.target.x
 o.y = 105
 return o
end

function status:update()
 if self.battle.finished then
  del(hud_objects,self)
  return
 end

 --todo fancy health bar
 -- drain animation here
end

function status:draw()
 camera(-self.x,-self.y)
 rect(-19,2,22,21,0)
 rectfill(-21,0,21,20,1)
 print(self.target.name,-18,3,0)
 print(self.target.name,-19,2,7)

 rect(-11,11,20,12,0)
 line(-12,10,19,10,11)
 line(-12,11,19,11,3)
 print("hp",-20,9,11)
 if self.target.hp < self.target.max_hp then
  rect(-12+ceil(max(self.target.hp,0)/self.target.max_hp*31),10,19,11,0)
 end
 if self.target == self.battle.objects[1] then
  local str=""..self.target.hp
  print(str,5-#str*2,9,7)
 end

 if self.target == self.battle.objects[1] then
  rect(-11,17,20,18,0)
  line(-12,16,19,16,14)
  line(-12,17,19,17,8)
  print("mp",-20,15,8)
  if self.target.mp < self.target.max_mp then
   rect(-12+ceil(max(self.target.mp,0)/self.target.max_mp*31),16,19,17,0)
  end

  local str=""..self.target.mp
  print(str,5-#str*2,15,7)
 end
end

function circout()
 camera()
 pal()
 for i=1,10 do
  circfill(64,64,i*8,0)
  flip()
 end
 blackscreen=true
 cls()
 for i=1,5 do flip() end
end

function circin(f)
 blackscreen=false
 for i=10,1,-1 do
  f()
  camera()
  pal()
  circfill(64,64,i*8,0)
  flip()
 end
end

function crossin(s)
 blackscreen=false
 if s ~= false then
  sfx(20)
 end
 for i=1,10 do
  clip(64-i*8,64-i*8,i*16,i*16)
  if tutorial then
   tutorial:draw()
  elseif inbattle then
   inbattle:draw()
  else
   world:draw()
  end
  flip()
 end
 clip()
end

ele_colors={2,1,12,4,5}

function drawelement(element, size)
 circfill(0,0,size and 6+size*2 or 9,ele_colors[element+1])
 circ(0,0,size and 6+size*2 or 9,0)
 sspr(element*8,64,7,7,-6,-7,14,14)
 if size and size > 1 then
  print("x"..size,4,6,7)
 end
end

function drawcard(card)
 --large element background
 circfill(6,7,9,ele_colors[card[1]+1])
 circ(6,7,9,0)
 --next link
 circfill(14,-1,5,ele_colors[card[2]+1])
 circ(14,-1,5,0)
 spr(128+card[2],11,-4)
 --large element foreground
 circfill(6,7,8,ele_colors[card[1]+1])
 sspr(card[1]*8,64,7,7,0,0,14,14)
end

battle=entity:new({finished=false,turn=1,selection=0,menu=0,time=0,next=-1,bg=0})
function battle:new(o)
 o=self._super.new(self,o)
 o.objects={}
 o.playing={}
 --todo don't reuse overworld
 --sprites/objects for battle
 if o.id == 1 then
--[[
  o.bg = 0
  add(o.objects,cat:new({x=32,y=104,dir=east,anim=2,hand={}}))
  add(o.objects,mouse:new({x=96,y=104,dir=west,hp=40,max_hp=40,hand={}}))
]]
 elseif o.id == 2 then
  o.bg = 1
  add(o.objects,cat:new({x=32,y=104,dir=east,anim=2,hand={}}))
  add(o.objects,dog:new({x=96,y=104,dir=west,hp=140,max_hp=140,hand={}}))
 elseif o.id == 3 then
  o.bg = 2
  add(o.objects,cat:new({x=32,y=104,dir=east,anim=2,hand={}}))
  add(o.objects,slippers:new({x=96,y=104,dir=west,hand={}}))
 end
 foreach(o.objects,function(t)
  add(hud_objects,status:new({target=t,battle=o}))
 end)

 sfx(9)
 circout()
 circin(function()o:draw()end)
 music(0)
 return o
end

function battle:finish(nodelay)
 self.finished=true
 inbattle=nil
 music(-1)
 circout()
 if nodelay then
  crossin(false)
 end
end

function battle:deal()
 return {flr(rnd(4)),flr(rnd(4))}
end

function battle:launch()
 --launch attack
 local hand=self.objects[self.turn].hand
 sfx(17)
 self.play_running=true
 -- turn playing cards
 -- into totals
 local totals={}
 foreach(self.playing,function(i)
  for a in all(totals) do
   if a[1] == hand[i][1] then
    a[2] += 1
    return
   end
  end
  add(totals,{hand[i][1],1})
 end)
 self.totals=totals
 --reset selection
 --for new turn
 self.menu=0
 self.selection=0
 self.used_magic=false
 self.next=-1
 self.playing={}
 --resupply hand
 local attacker=self.objects[self.turn]
 for i=1,5 do
  if hand[i][3] then
   hand[i]=self:deal(attacker)
  end
 end
 --change object animation
 attacker.anim=0
 attacker.step=0
 attacker.countdown=30
end

function battle:damage()
 local target=self.objects[self.turn%2+1]
 sfx(10)
 add(self.objects,damagetext:new({x=target.x,y=target.y,text=self.damage_amount==0 and "immune!" or "-"..self.damage_amount,color=8,battle=self}))
 target.hp -= self.damage_amount
 if target.hp < 0 then target.hp = 0 end
end

function battle:update()
 self.time+=1

 --cheat!
 --if btnp(4,1) then
 -- self.objects[2].hp=0
 --end

 foreach(self.objects,function(o)
  while o.hand and #o.hand < 5 do
   add(o.hand,self:deal())
  end
  o:think()
 end)

 if self.play_running then
  local attacker=self.objects[self.turn]

  if #self.objects > 2 then
   return
  end

  attacker.anim = 0

  if attacker.countdown > 0 then
   attacker.countdown -= 1
   return
  end

  local target = self.objects[self.turn%2+1]

  attacker.step += 1
  attacker.countdown = 30

  if target.hp <= 0 or attacker.step > #self.totals then
   attacker.anim=0
   self.turn=self.turn%2+1
   self.play_running=false
   if self.id==1 or self.objects[self.turn].hp <= 0 then
    if self.objects[1].hp <= 0 then
     world:moveroom(0)
     player.x,player.y,player.dir=64,64,south
     dialog:spawn({script="nora felt like she\nneeded a nap...<nod<fai<end"})
    elseif self.id==2 then
     player.quest+=1
     local x,y=48,64
     for o in all(world.objects) do
      if o._super == dog then
       del(world.objects, o)
       x,y=o.x+24,o.y-12
       break
      end
     end
     for o in all(world.room_npcs[1]) do
      if o._super == dog then
       del(world.room_npcs[1], o)
       break
      end
     end
     sleepingdog:spawn({x=x,y=y,activate=function(self,plr)
      face_eachother(self,plr)
      dialog:spawn({script="......<nod<clrat times like this, it's\nprobably best to let\nsleeping dogs lie.<nod<clrshe looks like she could\nuse the nap, anyway.<nod<end"})
     end})
     spinstars:spawn({x=x,y=y})
    elseif self.id==3 then
     dialog:spawn({script="the slippers stopped\nmoving...<nod<end"})
     if not kitchen_key then
      kitchen_key=key:spawn({x=96,y=74,color=9,activate=function(self,plr)
       face_eachother(self,plr)
       sfx(17)
       dialog:spawn({script="<spdnora found kitchen key.\nthe kitchen is now open.<nod<end"})
       mset(11,14,80)
       mset(11,13,81)
       del(world.objects,self)
       kitchen_key=true
      end})
     end
    end
    self:finish(self.objects[1].hp > 0)
   else
    if self.turn == 1 then
     sfx(18)
    end
    self.objects[self.turn].anim=2
   end
   return
  end

  attacker.anim=1
  local atk = self.totals[attacker.step]
  self.damage_amount=2+2*atk[2]*atk[2]
  if target.weakness then
   self.damage_amount = flr(self.damage_amount * target.weakness[atk[1]+1] + 0.5)
  end
  if atk[1]==0 then
   sfx(14)
   self.damage_amount = flr(self.damage_amount/4+0.5)
   add(self.objects,fire:new({target=target,battle=self}))
  elseif atk[1]==1 then
   sfx(14)
   add(self.objects,lightning:new({target=target,battle=self}))
  elseif atk[1]==2 then
   sfx(9)
   self.damage_amount = flr(self.damage_amount/2+0.5)
   add(self.objects,water:new({target=target,battle=self}))
  elseif atk[1]==3 then
   sfx(16)
   local px,vx=earth.px,earth.vx
   if self.turn == 2 then
    px,vx=-px,-vx
   end
   add(self.objects,earth:new({target=target,battle=self,px=px,vx=vx}))
  else
   self:damage()
  end
 elseif self.turn==1 then
  local hand=self.objects[1].hand
  if self.menu==0 then
   if btnp(0) and self.selection%2==1 then
    sfx(19)
    self.selection-=1
   elseif btnp(1) and self.selection%2==0 then
    sfx(19)
    self.selection+=1
   elseif btnp(2) and flr(self.selection/2)==1 then
    sfx(19)
    self.selection-=2
   elseif btnp(3) and flr(self.selection/2)==0 then
    sfx(19)
    self.selection+=2
   elseif btnp(5) then
    if self.selection==0 then
     -- attack
     sfx(23)
     self.menu,self.selection=1,1
    elseif self.selection==1 then
     --skills
     sfx(23)
     self.menu,self.selection=2,0
    elseif self.selection==2 then
     -- items
     sfx(11)
    elseif self.selection==3 then
     -- run
     sfx(25)
     self:finish(true)
    end
   end
  elseif self.menu==2 then
   if btnp(2) and self.selection>0 then
    sfx(19)
    self.selection-=1
   elseif btnp(3) and self.selection<5 then
    sfx(19)
    self.selection+=1
   elseif btnp(4) then
    sfx(13)
    self.menu,self.selection=0,0
   elseif btnp(5) then
    local s=self.selection
    local mp=s==0 and 2 or s==1 and 8 or 16
    if self.objects[1].mp < mp then
     sfx(11)
    else
     sfx(24)
     self.used_magic=true
     self.menu,self.selection=1,1
     self.objects[1].mp -= mp
     if s==0 then
      -- shuffle next
      foreach(hand,function(c)
       c[2]=flr(rnd(4))
      end)
     elseif s==1 then
      -- full random
      for i=1,5 do
       hand[i]=self:draw()
      end
     elseif s>=2 then
      -- convert
      local count,count2,mcc={0,0,0,0},{0,0,0,0},-1
      -- count cards
      foreach(hand,function(c)
       -- don't count the
       -- element we're replacing!
       if s-2==c[1] then return end
       -- +1
       count[c[1]+1]+=1
       count2[c[2]+1]+=1
       if count[c[1]+1]>=3 then
        -- if there's at least
        -- three of an element
        -- in our hand, it's
        -- obviously the most
        -- common card.
        mcc=c[1]
       end
      end)
      -- we don't have at least
      -- three of any card, so
      -- find the most common
      -- card out of the remainder
      if mcc==-1 then
       -- find highest count
       for i=1,4 do
        if count[i] > 0 or count2[i] > 0 then
         -- select first element
         -- that has a card
         if mcc==-1 then
          mcc=i-1
         -- select highest base
         -- element count
         elseif count[i] > count[mcc+1] then
          mcc=i-1
         -- break ties with the
         -- next link count
         elseif count[i] == count[mcc+1] and count2[i] > count2[mcc+1] then
          mcc=i-1
         end
        end
       end
       -- if every count was 0,
       -- that means the hand
       -- consists entirely of
       -- the element we're
       -- converting to...
       -- and linking to the
       -- element we're
       -- converting to.
       --
       -- a total nop.
       if mcc==-1 then return end
      end
      -- replace all of the
      -- most common element with
      -- the conversion element.
      foreach(hand,function(c)
       if c[1]==mcc then
        c[1]=s-2
       end
       if c[2]==mcc then
        c[2]=s-2
       end
      end)
     end
    end
   end
  elseif self.menu==1 then
   if btnp(3) then
    sfx(19)
    self.selection=6
   elseif btnp(2) and self.selection==6 then
    sfx(19)
    self.selection=3
    while self.selection>1 and hand[self.selection][3] do
     self.selection-=1
    end
    while self.selection<6 and hand[self.selection][3] do
     self.selection+=1
    end
   elseif btnp(0) and self.selection>1 and self.selection<6 then
    sfx(19)
    local was=self.selection
    self.selection-=1
    while self.selection>0 and hand[self.selection][3] do
     self.selection-=1
    end
    if self.selection==0 then
     self.selection=was
    end
   elseif btnp(1) and self.selection<5 then
    sfx(19)
    local was=self.selection
    self.selection+=1
    while self.selection<6 and hand[self.selection][3] do
     self.selection+=1
    end
    if self.selection==6 then
     self.selection=was
    end
   end
   if btnp(4) then
    if #self.playing > 0 then
     sfx(13)
     local c=self.playing[#self.playing]
     self.playing[#self.playing]=nil
     hand[c][3]=false
     if #self.playing==0 then
      self.next=-1
     else
      self.next=hand[self.playing[#self.playing] ][2]
     end

     --reset selection
     self.selection=1
     while self.selection<6 and hand[self.selection][3] do
      self.selection+=1
     end
    elseif self.used_magic then
     sfx(11)
    else
     sfx(13)
     self.menu,self.selection=0,0
    end
   end
   if btnp(5) then
    if self.selection==6 then
     if #self.playing==0 then
      --can't launch 0 cards
      sfx(11)
     else
      self:launch()
     end
     return
    end
    local card=hand[self.selection]
    if card[3] or (self.next~=-1 and card[1]~=self.next) then
     sfx(11)
     return
    end
    sfx(12)
    add(self.playing,self.selection)
    card[3]=true
    self.next=card[2]
    while self.selection < 6 and hand[self.selection][3] do
     self.selection+=1
    end
    if self.selection == 6 then
     self.selection-=1
     while self.selection > 0 and hand[self.selection][3] do
      self.selection-=1
     end
     if self.selection==0 then
      self.selection = 6
     end
    end
   end
  end
 elseif self.turn > 1 and not player.busy then
  local hand=self.objects[self.turn].hand
  --todo real ai here
  local n=6-flr(sqrt(rnd(25)+1))
  for i=1,n do
   add(self.playing,i)
  end
  self:launch()
 end
end

function printo(text,x,y,c,c2)
 for y=y-1,y+1 do
  for x=x-1,x+1 do
   print(text,x,y,c2)
  end
 end
 print(text,x,y,c)
end

function battle:draw()
 cls()
 camera(8,8)
 for y=0,8 do
  for x=0,8 do
   local t=mget(x+self.bg*9,y)
   if t~=0 then
    sspr((t%16)*8,flr(t/16)*8,8,8,x*16,y*16,16,16)
   end
  end
 end

 for o in all(self.objects) do
  camera(-o.x,-o.y)
  pal()
  o:draw()
 end

	camera()
	pal()
	local hand=self.objects[self.turn].hand
 if self.play_running then
  -- render self.totals
  local x,y=64-(#self.totals-1)*14,48
  foreach(self.totals,function(a)
   camera(-x,-y)
   drawelement(a[1],a[2])
   x+=28
  end)
 elseif self.turn==1 then
  if self.menu==0 then
   camera(-32,-64)
   drawmenu(self.selection)
  elseif self.menu==2 then
   camera(-24,-24)
   drawskills(self.selection)
  elseif self.menu==1 then
  local x,y=64,32
  if #self.playing == 0 then
   camera(-x,-y)
   drawelement(4)
  else
   x -= min(#self.playing,4)*10
   foreach(self.playing,function(s)
    camera(-x,-y)
    drawelement(hand[s][1])
    x += 20
   end)
   if #self.playing<5 then
    camera(-x,-y)
    if self.time%12 > 6 then
     drawelement(hand[self.playing[#self.playing] ][2])
    else
     drawelement(4)
    end
   end
  end

  x,y=64-48,57
  local i=1
  foreach(hand, function(c)
   if c[3] then
    i+=1
    x+=20
    return
   end
   if self.selection==i then
    y=48
   else
    y=57
   end
   camera(-x,-y)
   drawcard(c)
   --selection arrow
   if self.selection==i then
    y=39+sin(self.time/10)*2
    camera(-x,-y)
    spr(133,-2,0)
    line(6,0,6,6,8)
    spr(133,7,0,1,1,true)
   end
   x+=20
   i+=1
  end)
  camera()
  local c=self.selection==6 and (#self.playing == 0 and 2 or self.time%10 < 5 and 3) or 1
  rectfill(40,77,87,83+6,c)
  rect(40,77,87,89,0)
  print("launch!",51,81,7)
 end
 end
end

damagetext=entity:new({text=""})
function damagetext:think()
 self.t += 1
 if self.t > 30 then
  del(self.battle.objects, self)
 end
 self.y -= 1
end

function damagetext:draw()
 printo(self.text,-#self.text*2,-12,self.color)
end

fire=entity:new()
function fire:think()
 self.t += 1
 if self.t%7 == 0 then
  self.battle:damage()
 end
 if self.t >= 30 then
  del(self.battle.objects,self)
 end
end

function fire:draw()
 if self.t%2 == 0 then
  return
 end
 for x=self.t%8,self.t%8+16,6 do
  sspr(1,65,5,5,self.target.x-8-6+x,self.target.y-12,8,12)
 end
end

lightning=entity:new({w=64+12,h=0})
function lightning:think()
 self.t += 1
 self.w -= 12
 self.h += 32
 if self.w <= 0 then
  self.battle:damage()
  del(self.battle.objects,self)
 end
end

function lightning:draw()
 if self.w > 32 then
  rectfill(0,0,128,128,6)
 end
 if self.w > 0 and self.t%2 ~= 0 then
  sspr(0,72,8,8,self.target.x-self.w/2,0,self.w,self.h)
 end
end

water=entity:new()
function water:think()
 self.t+=1
 if self.t == 8 or self.t == 30-8 then
  self.battle:damage()
 end
 if self.t >= 30 then
  del(self.battle.objects,self)
 end
end

function water:draw()
 local rectheight=16
 if self.t < 8 then
  rectheight=self.t*2+2
 elseif self.t > 30-8 then
  rectheight=(30-self.t)*2
 end
 if self.t%3 ~= 0 then
  rectfill(self.target.x-8,self.target.y-rectheight,self.target.x+8,self.target.y,12)
  line(self.target.x-7,self.target.y-rectheight,self.target.x-7,self.target.y,7)
  line(self.target.x-4,self.target.y-rectheight,self.target.x-4,self.target.y,7)
 end
 for x=0,16,4 do
  circfill(self.target.x-8+x,self.target.y-rectheight+sin((self.t*4+x)/32)*2,3,7)
 end
end

earth=entity:new({px=64,py=16,vx=-2.45,vy=6,hit=false})
function earth:think()
 if self.t < 10 then
  self.t += 1
  if self.t == 10 then
   sfx(9)
  end
  return
 end
 if self.py > 0 then
  self.vy -= 0.5
  self.px += self.vx
  self.py += self.vy
  if self.py < 0 then
   self.py = 0
  end
 else
  self.t += 1
  if not self.hit then
   self.hit = true
   sfx(15)
   self.battle:damage()
  end
  if self.t >= 30 then
   del(self.battle.objects,self)
  end
 end
end

function earth:draw()
 sspr(25,65,5,5,self.target.x-self.px-10,self.target.y-self.py-20,20,20)
end

function face_eachother(actor1,actor2)
 if abs(actor1.x-actor2.x) < abs(actor1.y-actor2.y) then
  if actor1.y < actor2.y then
   actor1.dir,actor2.dir=south,north
  else
   actor1.dir,actor2.dir=north,south
  end
 else
  if actor1.x < actor2.x then
   actor1.dir,actor2.dir=east,west
  else
   actor1.dir,actor2.dir=west,east
  end
 end
end

function _init()
 player=cat:spawn({x=64,y=120,busy=false,quest=0,encounter_steps=0})
 world:moveroom(1)
end

function _update()
 if tutorial then
  tutorial:update()
 elseif inbattle then
  inbattle:update()
 else
  if not player.busy then
   player:control()
  end
  world:update()
 end
 foreach(hud_objects,function(o)
  o:update()
 end)
end

function _draw()
 if blackscreen then
  cls()
 elseif tutorial then
  tutorial:draw()
 elseif inbattle then
  inbattle:draw()
 else
  world:draw()
 end

 foreach(hud_objects,function(o)
  camera()
  pal()
  o:draw()
 end)
 camera()
 if the_end then
  local t="( the end )"
  print(t,64-#t*2,24,7)
  t="pico-8 jam #2"
  print(t,64-#t*2,40,6)
  t='"chain reaction"'
  print(t,64-#t*2,48,6)
  t="entry by jte, 2016-05"
  print(t,64-#t*2,88,6)
  t="jte@kidradd.org"
  print(t,64-#t*2,96,5)
 end
end
